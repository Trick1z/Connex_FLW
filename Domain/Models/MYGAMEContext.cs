// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Domain.Models;

public partial class MYGAMEContext : DbContext
{
    public MYGAMEContext(DbContextOptions<MYGAMEContext> options)
        : base(options)
    {
    }

    public virtual DbSet<FileAttach> FileAttach { get; set; }

    public virtual DbSet<IssueCategories> IssueCategories { get; set; }

    public virtual DbSet<IssueForm> IssueForm { get; set; }

    public virtual DbSet<IssueFormTask> IssueFormTask { get; set; }

    public virtual DbSet<IssueFormTaskAudit> IssueFormTaskAudit { get; set; }

    public virtual DbSet<Log_Categories> Log_Categories { get; set; }

    public virtual DbSet<Log_Rel_User_Categories> Log_Rel_User_Categories { get; set; }

    public virtual DbSet<Log_User_Form> Log_User_Form { get; set; }

    public virtual DbSet<Pages> Pages { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    public virtual DbSet<Ref_FormStatus> Ref_FormStatus { get; set; }

    public virtual DbSet<Ref_TaskStatus> Ref_TaskStatus { get; set; }

    public virtual DbSet<Rel_Categories_Product> Rel_Categories_Product { get; set; }

    public virtual DbSet<Rel_Page_Role> Rel_Page_Role { get; set; }

    public virtual DbSet<Rel_User_Categories> Rel_User_Categories { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<RunningNo> RunningNo { get; set; }

    public virtual DbSet<SystemConfig> SystemConfig { get; set; }

    public virtual DbSet<SystemError> SystemError { get; set; }

    public virtual DbSet<User> User { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<FileAttach>(entity =>
        {
            entity.HasKey(e => e.FileId).HasName("PK_FileAttach_1");

            entity.Property(e => e.CreatedBy).HasColumnType("datetime");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.SystemPath)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<IssueCategories>(entity =>
        {
            entity.HasKey(e => e.IssueCategoriesId).HasName("PK_IssueCategoiries");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IssueCategoriesName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<IssueForm>(entity =>
        {
            entity.HasKey(e => e.FormId).HasName("PK_Form");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DocNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DoneTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.SubmitedTime).HasColumnType("datetime");
            entity.Property(e => e.SystemStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SystemStatusCodeNavigation).WithMany(p => p.IssueForm)
                .HasForeignKey(d => d.SystemStatusCode)
                .HasConstraintName("FK_Form_Status");
        });

        modelBuilder.Entity<IssueFormTask>(entity =>
        {
            entity.HasKey(e => new { e.FormId, e.TaskSeq }).HasName("PK_IssueFormTask_1");

            entity.Property(e => e.AssignedTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.DetectedTime).HasColumnType("datetime");
            entity.Property(e => e.DoneTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.RejectReason)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Rp_Location)
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.SubmitTime).HasColumnType("datetime");
            entity.Property(e => e.SystemStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.File).WithMany(p => p.IssueFormTask)
                .HasForeignKey(d => d.FileId)
                .HasConstraintName("FK_IssueFormTask_FileAttach");

            entity.HasOne(d => d.Form).WithMany(p => p.IssueFormTask)
                .HasForeignKey(d => d.FormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssueFormTask_IssueForm");

            entity.HasOne(d => d.SystemStatusCodeNavigation).WithMany(p => p.IssueFormTask)
                .HasForeignKey(d => d.SystemStatusCode)
                .HasConstraintName("FK_IssueFormTask_Ref_TaskStatus");

            entity.HasOne(d => d.Rel_Categories_Product).WithMany(p => p.IssueFormTask)
                .HasForeignKey(d => new { d.IssueCategoriesId, d.ProductId })
                .HasConstraintName("FK_IssueFormTask_Rel_Categories_Product");
        });

        modelBuilder.Entity<IssueFormTaskAudit>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ActionTime).HasColumnType("datetime");
            entity.Property(e => e.TaskSeq)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Log_Categories>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.Property(e => e.ActionTime).HasColumnType("datetime");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Log_Rel_User_Categories>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.Property(e => e.ActionTime).HasColumnType("datetime");
            entity.Property(e => e.ActionType).HasMaxLength(512);
        });

        modelBuilder.Entity<Log_User_Form>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.Property(e => e.ActionTime).HasColumnType("datetime");
            entity.Property(e => e.ActionType)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.DocNo)
                .HasMaxLength(512)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pages>(entity =>
        {
            entity.HasKey(e => e.PageId);

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.PageUrl)
                .IsRequired()
                .HasMaxLength(512);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(512);
        });

        modelBuilder.Entity<Ref_FormStatus>(entity =>
        {
            entity.HasKey(e => e.SystemStatusCode);

            entity.Property(e => e.SystemStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Descriptions)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Ref_TaskStatus>(entity =>
        {
            entity.HasKey(e => e.SystemStatusCode);

            entity.Property(e => e.SystemStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Rel_Categories_Product>(entity =>
        {
            entity.HasKey(e => new { e.IssueCategoriesId, e.ProductId }).HasName("PK_rel_Categories_Product");

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");

            entity.HasOne(d => d.IssueCategories).WithMany(p => p.Rel_Categories_Product)
                .HasForeignKey(d => d.IssueCategoriesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelCategoriesProduct_IssueCategoriies");

            entity.HasOne(d => d.Product).WithMany(p => p.Rel_Categories_Product)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RelCategoriesProduct_Products");
        });

        modelBuilder.Entity<Rel_Page_Role>(entity =>
        {
            entity.HasKey(e => new { e.PageId, e.RoleId });

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");

            entity.HasOne(d => d.Page).WithMany(p => p.Rel_Page_Role)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rel_Role_Page");

            entity.HasOne(d => d.Role).WithMany(p => p.Rel_Page_Role)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rel_Page_Role");
        });

        modelBuilder.Entity<Rel_User_Categories>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.IssueCategoriesId });

            entity.Property(e => e.CreatedTime).HasColumnType("datetime");

            entity.HasOne(d => d.IssueCategories).WithMany(p => p.Rel_User_Categories)
                .HasForeignKey(d => d.IssueCategoriesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rel_User_Categories_Categories");

            entity.HasOne(d => d.User).WithMany(p => p.Rel_User_Categories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Rel_User_Categories_User");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RunningNo>(entity =>
        {
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Prefix)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SystemConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigCode);

            entity.Property(e => e.ConfigCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConfigType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfigValue)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SystemError>(entity =>
        {
            entity.HasKey(e => e.ErrorId);

            entity.Property(e => e.ErrorMessage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ErrorType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.CreatedTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedTime).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(512)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Role).WithMany(p => p.User)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Roles_User");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}